//
// PageSingle.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct PageSingle {

    /** ID of the page. */
    public var id: String?
    public var status: ContentStatus?
    /** Title of the page. */
    public var title: String?
    /** ID of the space the page is in. */
    public var spaceId: String?
    /** ID of the parent page, or null if there is no parent page. */
    public var parentId: String?
    public var parentType: ParentContentType?
    /** Position of child page within the given parent page tree. */
    public var position: Int32?
    /** The account ID of the user who created this page originally. */
    public var authorId: String?
    /** The account ID of the user who owns this page. */
    public var ownerId: String?
    /** The account ID of the user who owned this page previously, or null if there is no previous owner. */
    public var lastOwnerId: String?
    /** Date and time when the page was created. In format \&quot;YYYY-MM-DDTHH:mm:ss.sssZ\&quot;. */
    public var createdAt: Date?
    public var version: Version?
    public var body: BodySingle?
    public var labels: AttachmentSingleLabels?
    public var properties: AttachmentSingleProperties?
    public var operations: AttachmentSingleOperations?
    public var likes: BlogPostSingleLikes?
    public var versions: AttachmentSingleVersions?
    /** Whether the page has been favorited by the current user. */
    public var isFavoritedByCurrentUser: Bool?
    public var links: AbstractPageLinks?

    public init(id: String? = nil, status: ContentStatus? = nil, title: String? = nil, spaceId: String? = nil, parentId: String? = nil, parentType: ParentContentType? = nil, position: Int32? = nil, authorId: String? = nil, ownerId: String? = nil, lastOwnerId: String? = nil, createdAt: Date? = nil, version: Version? = nil, body: BodySingle? = nil, labels: AttachmentSingleLabels? = nil, properties: AttachmentSingleProperties? = nil, operations: AttachmentSingleOperations? = nil, likes: BlogPostSingleLikes? = nil, versions: AttachmentSingleVersions? = nil, isFavoritedByCurrentUser: Bool? = nil, links: AbstractPageLinks? = nil) {
        self.id = id
        self.status = status
        self.title = title
        self.spaceId = spaceId
        self.parentId = parentId
        self.parentType = parentType
        self.position = position
        self.authorId = authorId
        self.ownerId = ownerId
        self.lastOwnerId = lastOwnerId
        self.createdAt = createdAt
        self.version = version
        self.body = body
        self.labels = labels
        self.properties = properties
        self.operations = operations
        self.likes = likes
        self.versions = versions
        self.isFavoritedByCurrentUser = isFavoritedByCurrentUser
        self.links = links
    }
    
    internal init(client: Components.Schemas.PageSingle?) {
        self.id = client?.id
        self.status = ContentStatus(status: client?.status)
        self.title = client?.title
        self.spaceId = client?.spaceId
        self.parentId = client?.parentId
        self.parentType = ParentContentType(type: client?.parentType)
        self.position = client?.position
        self.authorId = client?.authorId
        self.ownerId = client?.ownerId
        self.lastOwnerId = client?.lastOwnerId
        self.createdAt = client?.createdAt
        self.version = Version(client: client?.version)
        self.body = BodySingle(client: client?.body)
        self.labels = AttachmentSingleLabels(client: client?.labels)
        self.properties = AttachmentSingleProperties(client: client?.properties)
        self.operations = AttachmentSingleOperations(client: client?.operations)
        self.likes = BlogPostSingleLikes(client: client?.likes)
        self.versions = AttachmentSingleVersions(client: client?.versions)
        self.isFavoritedByCurrentUser = client?.isFavoritedByCurrentUser
        self.links = AbstractPageLinks(client: client?._links)
    }

}
